##MODULES
module(load="imuxsock") # provides support for local system logging
module(load="imklog")   # provides kernel logging support
module(load="immark")
module(load="imudp")
input(type="imuxsock" Socket="/run/systemd/journal/syslog")


#### GLOBAL DIRECTIVES
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat
$FileOwner root 
$FileGroup adm 
$FileCreateMode 0640 
$DirCreateMode 0755 
$Umask 0022
$WorkDirectory /var/spool/rsyslog
$PreserveFQDN on
$LocalHostName mowertii-vm-1
$EscapeControlCharactersOnReceive off

### EXTENDED
input(type="imudp" address="127.0.0.1" port="515")
main_queue(
  queue.workerThreads="2"
  queue.dequeueBatchSize="1000"
  queue.highWatermark="240000"    # max no. of events to hold in memory
  queue.lowWatermark="5000"     # use memory queue again, when it's back to this level
  queue.spoolDirectory="/var/spool/rsyslog/queues"  # where to write on disk
  queue.fileName="stats_ruleset"
  queue.maxDiskSpace="2g"        # it will stop at this much disk space
  queue.size="400000"           # or this many messages
  queue.saveOnShutdown="on"      # save memory queue contents to disk when rsyslog is exiting
)

set $!logtype = 'LogRsyslogJson';
set $!hostname = 'mowertii-vm-1';
set $!logdest = 'undefinded';
template(name="t_jsonf" type="list" option.json="on") {
  constant(value="{")
  constant(value="\"@timestamp\":\"") property(name="timegenerated" dateFormat="rfc3339")
  constant(value="\",\"@timereported\":\"") property(name="timereported" dateFormat="rfc3339")
  constant(value="\",\"@version\":\"1.3.4")
  constant(value="\",\"message\":\"") property(name="msg")
  constant(value="\",\"fromhost\":\"") property(name="$!hostname")
  constant(value="\",\"severity\":\"") property(name="syslogseverity-text")
  constant(value="\",\"facility\":\"") property(name="syslogfacility-text")
  constant(value="\",\"programname\":\"") property(name="programname")
  constant(value="\",\"procid\":\"") property(name="procid")
  constant(value="\",\"syslogtag\":\"") property(name="SysLogTag")
  constant(value="\",\"logtype\":\"") property(name="$!logtype")
  constant(value="\",\"logdest\":\"") property(name="$!logdest")
  constant(value="\"}\n")
}

template(name="f_message_only_json" type="list" option.json="on") {
  constant(value="{")
  constant(value="\"@timestamp\":\"") property(name="timegenerated" dateFormat="rfc3339")
  constant(value="\",\"message\":\"") property(name="msg")
  constant(value="\"}\n")
}
if ($msg contains 'IN') then { action (type="omfile" file="/var/log/iptables_log.log") stop }
if ( $syslogtag startswith "docker-kamailio") then {
  set $!logdest = "syslog";
  action(type="omfile" template="f_message_only_json" file="/var/log/dockers/kamailio-stdout.log")
  stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith "docker-freeswitch") then {
  set $!logdest = "syslog";
  action(type="omfile" template="t_jsonf" file="/var/log/dockers/freeswitch-stdout.log")
  stop
}

##LOG_consul
if ( $!logtype contains 'LogRsyslogJson' )  and ($msg contains "agent" ) and not ($msg contains "nginx") then {
  set $!logdest = "consul-agent";
  action(type="omfile" template="t_jsonf" file="/var/log/consul-agent-stdout.log")
  stop
}

##LOG_fluentd
if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith 'fluentd' ) then {
  set $!logdest = "fluentd_stdout";
  stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ($msg  contains "rtpengine") then {
  set $!logdest = "rtpengine";
  action(type="omfile" template="t_jsonf" file="/var/log/dockers/rtpengine-stdout.log")
  stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith "asterisk") then {
  set $!logdest = "asterisk";
  action(type="omfile" template="t_jsonf" file="/var/log/dockers/asterisk-stdout.log")
  stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith "uwsgi") then {
  set $!logdest = "syslog";
  action(type="omfile" template="t_jsonf" file="/var/log/uwsgi-stdout.log")
  stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith "worker-sms-http-rx") then {
  set $!logdest = "syslog";
  action(type="omfile" template="t_jsonf" file="/var/log/worker-sms-http-rx-stdout.log")
  stop
}
if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith "worker-sms-registration-bot") then {
  set $!logdest = "syslog";
  action(type="omfile" template="t_jsonf" file="/var/log/worker-sms-registration-bot.log")
  stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith "worker-binance-captcha-solver") then {
  set $!logdest = "syslog";
  action(type="omfile" template="f_message_only_json"  flushOnTXEnd="off" asyncWriting="on" flushInterval="15" ioBufferSize="64k" file="/var/log/worker-binance-captcha-solver.log")
  stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith "worker-geetest-captcha-solver") then {
  set $!logdest = "syslog";
  action(type="omfile" template="t_jsonf" file="/var/log/worker-geetest-captcha-solver.log")
  stop
}



##LOG_NGINX_PROXY
if ( $!logtype contains 'LogRsyslogJson'  and $syslogtag contains 'nginxproxy' and $msg contains 'nginx.time' ) then {
  set $!logdest = "nginxproxy_access";
  action(type="omfile" template="t_jsonf" file="/var/log/nginxproxy_access_stdout.log")
  action(type="omfwd" Target="10.48.0.244" Port="516" Protocol="tcp" template="t_jsonf"
    queue.type="LinkedList" 
    queue.size="40000" 
    queue.filename="nginxproxy_access_stdout" 
    queue.highwatermark="25000"
    queue.lowwatermark="50" 
    queue.maxdiskspace="1000m" 
    queue.saveonshutdown="on" 
    action.resumeRetryCount="-1"
    action.reportSuspension="on" 
    action.reportSuspensionContinuation="on" 
    action.resumeInterval="10")  
  stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag contains 'nginxproxy') and not ( $msg contains 'nginx.time' ) then {
  set $!logdest = "nginxproxy_other";
  action(type="omfile" template="t_jsonf" file="/var/log/nginxproxy_other_stdout.log")
  action(type="omfwd" Target="10.48.0.244" Port="516" Protocol="tcp" template="t_jsonf"
    queue.type="LinkedList" 
    queue.size="40000" 
    queue.filename="nginxproxy_other_stdout" 
    queue.highwatermark="25000"
    queue.lowwatermark="50" 
    queue.maxdiskspace="1000m" 
    queue.saveonshutdown="on" 
    action.resumeRetryCount="-1"
    action.reportSuspension="on" 
    action.reportSuspensionContinuation="on" 
    action.resumeInterval="10")
  stop 
}

##LOG_WORKER_ACCESS
if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag contains 'worker') and ($msg contains 'nginx.time' ) then {
  set $!logdest = "worker_access";
  action(type="omfile" template="t_jsonf" file="/var/log/worker_access_stdout.log")
  action(type="omfwd" Target="10.48.0.244" Port="516" Protocol="tcp" template="t_jsonf"
    queue.type="LinkedList" 
    queue.size="40000" 
    queue.filename="worker_access_stdout" 
    queue.highwatermark="25000"
    queue.lowwatermark="50" 
    queue.maxdiskspace="1000m" 
    queue.saveonshutdown="on" 
    action.resumeRetryCount="-1"
    action.reportSuspension="on" 
    action.reportSuspensionContinuation="on" 
    action.resumeInterval="10")  
  stop

}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag contains 'worker') and not ( $msg contains 'nginx.time' ) then {
  set $!logdest = "worker_other";
  action(type="omfile" template="t_jsonf" file="/var/log/worker_other_stdout.log")
  action(type="omfwd" Target="10.48.0.244" Port="516" Protocol="tcp" template="t_jsonf"
    queue.type="LinkedList" 
    queue.size="40000" 
    queue.filename="worker_other" 
    queue.highwatermark="25000"
    queue.lowwatermark="50" 
    queue.maxdiskspace="1000m" 
    queue.saveonshutdown="on" 
    action.resumeRetryCount="-1"
    action.reportSuspension="on" 
    action.reportSuspensionContinuation="on" 
    action.resumeInterval="10")  
  stop  
}
##LOG_DISPATCHER
if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag contains 'dispatcher') and ($msg contains 'nginx.time' ) then {
  set $!logdest = "dispatcher_access";
  action(type="omfile" template="t_jsonf" file="/var/log/dispatcher_access_stdout.log")
  action(type="omfwd" Target="10.48.0.244" Port="516" Protocol="tcp" template="t_jsonf"
    queue.type="LinkedList" 
    queue.size="40000" 
    queue.filename="dispatcher_access_stdout" 
    queue.highwatermark="25000"
    queue.lowwatermark="50" 
    queue.maxdiskspace="1000m" 
    queue.saveonshutdown="on" 
    action.resumeRetryCount="-1"
    action.reportSuspension="on" 
    action.reportSuspensionContinuation="on" 
    action.resumeInterval="10")  
  stop   
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag contains 'dispatcher') and not ( $msg contains 'nginx.time' ) then {
  set $!logdest = "dispatcher_other";
  action(type="omfile" template="t_jsonf" file="/var/log/dispatcher_other_stdout.log")
  action(type="omfwd" Target="10.48.0.244" Port="516" Protocol="tcp" template="t_jsonf"
    queue.type="LinkedList" 
    queue.size="40000" 
    queue.filename="dispatcher_other_stdout" 
    queue.highwatermark="25000"
    queue.lowwatermark="50" 
    queue.maxdiskspace="1000m" 
    queue.saveonshutdown="on" 
    action.resumeRetryCount="-1"
    action.reportSuspension="on" 
    action.reportSuspensionContinuation="on" 
    action.resumeInterval="10")  
  stop   
}

##LOG_MYSQL
if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith 'mysql' ) then {
  set $!logdest = "mysql_stdout";
  action(type="omfile" template="t_jsonf" file="/var/log/mysql_stdout.log")
  action(type="omfwd" Target="10.48.0.244"  Port="516" Protocol="tcp" template="t_jsonf"
    queue.type="LinkedList" 
    queue.size="40000" 
    queue.filename="mysql_stdout" 
    queue.highwatermark="25000"
    queue.lowwatermark="50" 
    queue.maxdiskspace="1000m" 
    queue.saveonshutdown="on" 
    action.resumeRetryCount="-1"
    action.reportSuspension="on" 
    action.reportSuspensionContinuation="on" 
    action.resumeInterval="10")
  stop
}
##LOG_php-fpm
if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith 'php-fpm' ) then {
  set $!logdest = "php-fpm";
  action(type="omfile" template="t_jsonf" file="/var/log/php_fpm_log_stdout.log")
  action(type="omfwd" Target="10.48.0.244" Port="516" Protocol="tcp" template="t_jsonf"
    queue.type="LinkedList" 
    queue.size="40000" 
    queue.filename="php_fpm_log_stdout" 
    queue.highwatermark="25000"
    queue.lowwatermark="50" 
    queue.maxdiskspace="1000m" 
    queue.saveonshutdown="on" 
    action.resumeRetryCount="-1"
    action.reportSuspension="on" 
    action.reportSuspensionContinuation="on" 
    action.resumeInterval="10")  
  stop   
}
##LOG_docker-smsg
if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith 'docker-smsg' ) then {
  set $!logdest = "docker-smsg";
  action(type="omfile" template="t_jsonf" file="/var/log/docker_smsg_log_stdout.log")
  action(type="omfwd" Target="10.48.0.244" Port="516" Protocol="tcp" template="t_jsonf"
    queue.type="LinkedList" 
    queue.size="40000" 
    queue.filename="docker_smsg_log_stdout" 
    queue.highwatermark="25000"
    queue.lowwatermark="50" 
    queue.maxdiskspace="1000m" 
    queue.saveonshutdown="on" 
    action.resumeRetryCount="-1"
    action.reportSuspension="on" 
    action.reportSuspensionContinuation="on" 
    action.resumeInterval="10")  
  stop   
}
##LOG_SYSLOG_REMOTE
if ( $!logtype contains 'LogRsyslogJson' ) then {
  set $!logdest = "syslog";
    action(type="omfwd" Target="10.48.0.244"  Port="516" Protocol="tcp" template="t_jsonf"
      queue.type="LinkedList" 
      queue.size="40000" 
      queue.filename="rsyslog_remote" 
      queue.highwatermark="25000"
      queue.lowwatermark="50" 
      queue.maxdiskspace="1000m" 
      queue.saveonshutdown="on" 
      action.resumeRetryCount="-1"
      action.reportSuspension="on" 
      action.reportSuspensionContinuation="on" 
      action.resumeInterval="10")
} 

##LOG_SYSLOG_syslog
if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogfacility-text startswith 'auth' ) then  {
    set $!logdest = "syslog";
    action(type="omfile" template="t_jsonf" file="/var/log/auth.log")
    stop 
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogfacility-text startswith 'daemon' ) then {
    set $!logdest = "syslog";
    action(type="omfile" template="t_jsonf" file="/var/log/daemon.log")
    stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogfacility-text startswith 'cron' ) then  {
    set $!logdest = "syslog";
    action(type="omfile" template="t_jsonf" file="/var/log/cron.log")
    stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogfacility-text startswith 'lpr' ) then  {
    set $!logdest = "syslog";
    action(type="omfile" template="t_jsonf" file="/var/log/lpr.log")
    stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogfacility-text startswith 'mail' ) then  {
    set $!logdest = "syslog";
    action(type="omfile" template="t_jsonf" file="/var/log/mail.log")
    stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogfacility-text startswith 'debug' ) then  {
    set $!logdest = "syslog";
    action(type="omfile" template="t_jsonf" file="/var/log/debug.log")
    stop
}


if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith "ansible") then  {
    set $!logdest = "syslog";
    action(type="omfile" template="t_jsonf" file="/var/log/ansible.log")
    stop
}

if ( $!logtype contains 'LogRsyslogJson' )  and ( $syslogtag startswith "redis") then  {
    set $!logdest = "syslog";
    action(type="omfile" template="t_jsonf" file="/var/log/redis-stdout.log")
    stop
}

if ( $!logtype contains 'LogRsyslogJson' ) then {
  set $!logdest = "syslog";
  action(type="omfile" template="t_jsonf" file="/var/log/full-stdout.log")
}
